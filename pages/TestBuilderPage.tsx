
import React, { useState } from 'react';
import DashboardLayout from '../components/DashboardLayout';
import useNavLinks from '../hooks/useNavLinks';
// Fix: Added imports for Question and QuestionType.
import { Question, QuestionType } from '../types';
import { SparklesIcon, TrashIcon, PlusCircleIcon, EyeIcon } from '../components/icons';
import AIQuestionGeneratorModal from '../components/AIQuestionGeneratorModal';
import { useNotification } from '../contexts/NotificationContext';

const TestBuilderPage: React.FC = () => {
    const navLinks = useNavLinks();
    const [testName, setTestName] = useState('');
    const [testType, setTestType] = useState('Technical Test');
    const [duration, setDuration] = useState(60);
    const [difficulty, setDifficulty] = useState('Medium');
    const [questions, setQuestions] = useState<Question[]>([]);
    const [isAiModalOpen, setIsAiModalOpen] = useState(false);
    const { addNotification } = useNotification();

    const addQuestion = (type: QuestionType) => {
        const newQuestion: Question = {
            id: `q-${Date.now()}`,
            text: '',
            type: type,
            options: type === QuestionType.MultipleChoice || type === QuestionType.MultipleSelect ? ['', ''] : undefined,
            correctAnswer: '',
            points: 10,
            tags: [],
            ownerId: 'current-user',
            category: 'Custom',
            subCategory: 'Custom',
        };
        setQuestions([...questions, newQuestion]);
    };
    
    const removeQuestion = (id: string) => {
        setQuestions(questions.filter(q => q.id !== id));
    };

    const handleAddQuestionsFromAI = (aiQuestions: Omit<Question, 'id'>[]) => {
        const newQuestions = aiQuestions.map(q => ({...q, id: `ai-${Date.now()}-${Math.random()}`}));
        setQuestions([...questions, ...newQuestions]);
        addNotification(`${newQuestions.length} questions generated by AI successfully!`, 'success');
        setIsAiModalOpen(false);
    };

    const saveTest = () => {
        if (!testName || questions.length === 0) {
            addNotification("Test name and at least one question are required.", "error");
            return;
        }
        addNotification(`Test "${testName}" saved successfully!`, "success");
        // Here you would typically send the data to your backend
        console.log({ testName, testType, duration, difficulty, questions });
    };

    const headerActions = (
        <button onClick={saveTest} className="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-lg">
            ðŸ’¾ Save Test
        </button>
    );

    return (
        <DashboardLayout navLinks={navLinks} pageTitle="Smart Test Builder" headerActions={headerActions}>
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                {/* Column 1: Test Configuration */}
                <div className="bg-white dark:bg-slate-800 p-6 rounded-2xl shadow-lg space-y-4">
                    <h3 className="text-lg font-bold">Test Configuration</h3>
                    <div>
                        <label className="block text-sm font-medium text-slate-600 dark:text-slate-300 mb-1">Test Name</label>
                        <input type="text" value={testName} onChange={e => setTestName(e.target.value)} placeholder="e.g., Advanced React Test" className="w-full p-2 bg-slate-100 dark:bg-slate-700 rounded-md" />
                    </div>
                     <div>
                        <label className="block text-sm font-medium text-slate-600 dark:text-slate-300 mb-1">Test Type</label>
                        <select value={testType} onChange={e => setTestType(e.target.value)} className="w-full p-2 bg-slate-100 dark:bg-slate-700 rounded-md">
                            <option>Technical Test</option>
                            <option>Personality Assessment</option>
                            <option>Soft Skills</option>
                        </select>
                    </div>
                     <div>
                        <label className="block text-sm font-medium text-slate-600 dark:text-slate-300 mb-1">Duration (minutes)</label>
                        <input type="number" value={duration} onChange={e => setDuration(parseInt(e.target.value))} className="w-full p-2 bg-slate-100 dark:bg-slate-700 rounded-md" />
                    </div>
                     <div>
                        <label className="block text-sm font-medium text-slate-600 dark:text-slate-300 mb-1">Difficulty</label>
                        <select value={difficulty} onChange={e => setDifficulty(e.target.value)} className="w-full p-2 bg-slate-100 dark:bg-slate-700 rounded-md">
                            <option>Easy</option>
                            <option>Medium</option>
                            <option>Hard</option>
                        </select>
                    </div>
                </div>

                {/* Column 2: Question Builder */}
                <div className="bg-white dark:bg-slate-800 p-6 rounded-2xl shadow-lg space-y-4">
                     <h3 className="text-lg font-bold">Question Builder</h3>
                     <div className="p-4 bg-slate-50 dark:bg-slate-700/50 rounded-lg space-y-2">
                        <p className="text-sm font-medium">Add a new question:</p>
                        <div className="grid grid-cols-2 gap-2">
                            <button onClick={() => addQuestion(QuestionType.MultipleChoice)} className="text-sm p-2 bg-white dark:bg-slate-600 rounded-md hover:bg-slate-100 dark:hover:bg-slate-500">Multiple Choice</button>
                            <button onClick={() => addQuestion(QuestionType.ShortAnswer)} className="text-sm p-2 bg-white dark:bg-slate-600 rounded-md hover:bg-slate-100 dark:hover:bg-slate-500">Short Answer</button>
                            <button onClick={() => addQuestion(QuestionType.TrueFalse)} className="text-sm p-2 bg-white dark:bg-slate-600 rounded-md hover:bg-slate-100 dark:hover:bg-slate-500">True/False</button>
                            <button onClick={() => addQuestion(QuestionType.Essay)} className="text-sm p-2 bg-white dark:bg-slate-600 rounded-md hover:bg-slate-100 dark:hover:bg-slate-500">Essay</button>
                        </div>
                     </div>
                     <div className="p-4 bg-purple-50 dark:bg-purple-900/30 rounded-lg text-center">
                        <h4 className="font-semibold text-purple-800 dark:text-purple-300">Feeling creative?</h4>
                        <p className="text-sm text-purple-600 dark:text-purple-400 mt-1 mb-3">Let our AI generate questions for you based on a topic.</p>
                        <button onClick={() => setIsAiModalOpen(true)} className="bg-purple-500 hover:bg-purple-600 text-white font-bold py-2 px-4 rounded-lg flex items-center justify-center w-full">
                            <SparklesIcon className="w-5 h-5 mr-2" />
                            Generate with AI
                        </button>
                     </div>
                </div>

                {/* Column 3: Preview */}
                <div className="lg:col-span-3 bg-white dark:bg-slate-800 p-6 rounded-2xl shadow-lg">
                    <h3 className="text-lg font-bold mb-4 flex items-center"><EyeIcon className="w-5 h-5 mr-2" /> Test Preview ({questions.length} questions)</h3>
                    <div className="space-y-4 max-h-96 overflow-y-auto pr-2">
                        {questions.map((q, index) => (
                            <div key={q.id} className="p-4 border border-slate-200 dark:border-slate-700 rounded-lg relative">
                                <p className="font-semibold">{index + 1}. {q.text || "New Question"}</p>
                                <p className="text-xs text-slate-500 mt-1">Type: {q.type}, Points: {q.points}</p>
                                 <button onClick={() => removeQuestion(q.id)} className="absolute top-2 right-2 text-red-500 hover:text-red-600 p-1">
                                    <TrashIcon className="w-4 h-4" />
                                </button>
                            </div>
                        ))}
                         {questions.length === 0 && (
                            <div className="text-center py-10 text-slate-500">
                                <p>Your questions will appear here as you add them.</p>
                            </div>
                        )}
                    </div>
                </div>
            </div>
            <AIQuestionGeneratorModal
                isOpen={isAiModalOpen}
                onClose={() => setIsAiModalOpen(false)}
                onAddQuestions={handleAddQuestionsFromAI}
            />
        </DashboardLayout>
    );
};

export default TestBuilderPage;
